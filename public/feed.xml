
  <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
      <title>Shane Boulden</title>
      <link>https://stb.id.au/blog</link>
      <description>Building applications, securing infrastructure and applications, and everything in-between.</description>
      <language>en-us</language>
      <managingEditor>dev@stb.id.au (Shane Boulden)</managingEditor>
      <webMaster>dev@stb.id.au (Shane Boulden)</webMaster>
      <lastBuildDate>Mon, 04 Oct 2021 00:00:00 GMT</lastBuildDate>
      <atom:link href="https://stb.id.au/feed.xml" rel="self" type="application/rss+xml"/>
      
  <item>
    <guid>https://stb.id.au/blog/fapolicyd-integrity</guid>
    <title>Application control and integrity checks</title>
    <link>https://stb.id.au/blog/fapolicyd-integrity</link>
    <description>Injecting integrity checks to application control processes is a winning security combination. Application control allows you to specify that only certain processes can execute on a system - but how do you know they are the right processes? How can you ensure that the code that you want to execute is the code that actually executes?</description>
    <pubDate>Wed, 06 Oct 2021 00:00:00 GMT</pubDate>
    <author>dev@stb.id.au (Shane Boulden)</author>
    <category>application</category><category>control</category><category>integrity</category><category>risk</category><category>security</category>
  </item>

  <item>
    <guid>https://stb.id.au/blog/app-control-for-everyone</guid>
    <title>Application control for everyone</title>
    <link>https://stb.id.au/blog/app-control-for-everyone</link>
    <description>Application control seems to be one of those elusive security controls that organisations spend years chasing. How can we validate which processes are authorised to run on a system, and then enforce this?</description>
    <pubDate>Wed, 15 Sep 2021 00:00:00 GMT</pubDate>
    <author>dev@stb.id.au (Shane Boulden)</author>
    <category>application</category><category>control</category><category>risk</category><category>security</category><category>linux</category>
  </item>

  <item>
    <guid>https://stb.id.au/blog/misp-on-rhel</guid>
    <title>Open source threat intelligence and SELinux</title>
    <link>https://stb.id.au/blog/misp-on-rhel</link>
    <description>How do you protect your threat intelligence sharing platform from compromise? Read on to learn how SELinux and podman can support a containerised MISP deployment.</description>
    <pubDate>Sun, 29 Aug 2021 00:00:00 GMT</pubDate>
    <author>dev@stb.id.au (Shane Boulden)</author>
    <category>open</category><category>source</category><category>threat</category><category>intelligence</category><category>selinux</category><category>containers</category>
  </item>

  <item>
    <guid>https://stb.id.au/blog/compliance-is-mislabelled</guid>
    <title>Compliance is mislabelled</title>
    <link>https://stb.id.au/blog/compliance-is-mislabelled</link>
    <description>Compliance evokes images of checking boxes. The real purpose of IT system compliance is risk migitation, and it probably just needs a better name</description>
    <pubDate>Wed, 18 Aug 2021 00:00:00 GMT</pubDate>
    <author>dev@stb.id.au (Shane Boulden)</author>
    <category>compliance</category><category>risk</category><category>security</category>
  </item>

    </channel>
  </rss>
